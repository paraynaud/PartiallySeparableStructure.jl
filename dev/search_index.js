var documenterSearchIndex = {"docs":
[{"location":"#PartiallySeparable.jl-Documentation-1","page":"PartiallySeparable.jl Documentation","title":"PartiallySeparable.jl Documentation","text":"","category":"section"},{"location":"#","page":"PartiallySeparable.jl Documentation","title":"PartiallySeparable.jl Documentation","text":"test modif","category":"page"},{"location":"#","page":"PartiallySeparable.jl Documentation","title":"PartiallySeparable.jl Documentation","text":"CurrentModule = PartiallySeparableStructure\nDocTestSetup = quote\n    using .PartiallySeparableStructure\nend","category":"page"},{"location":"#","page":"PartiallySeparable.jl Documentation","title":"PartiallySeparable.jl Documentation","text":"Modules = [PartiallySeparableStructure]","category":"page"},{"location":"#PartiallySeparableStructure.deduct_partially_separable_structure-Tuple{Any,Int64}","page":"PartiallySeparable.jl Documentation","title":"PartiallySeparableStructure.deduct_partially_separable_structure","text":"deduct_partially_separable_structure(expr_tree, n)\n\nFind the partially separable structure of a function f stored as an expression tree expr_tree. To define properly the size of sparse matrix we need the size of the problem : n. At the end, we get the partially separable structure of f, f(x) = ∑fᵢ(xᵢ)\n\n\n\n\n\n","category":"method"},{"location":"#PartiallySeparableStructure.build_gradient-Union{Tuple{T}, Tuple{Y}, Tuple{PartiallySeparableStructure.SPS{T},PartiallySeparableStructure.grad_vector{Y}}} where T where Y<:Number","page":"PartiallySeparable.jl Documentation","title":"PartiallySeparableStructure.build_gradient","text":"build_gradient(sps, g)\n\nConstructs a vector of size n from the list of element gradient of the sps structure which has numerous element gradient of size nᵢ. The purpose of the function is to gather these element gradient into a real gradient of size n. The function gradnito_n! will add element gradient of size nᵢ at the right inside the gradient of size n.\n\n\n\n\n\n","category":"method"},{"location":"#PartiallySeparableStructure.compiled_grad_of_elmt_fun-Union{Tuple{PartiallySeparableStructure.element_function{T}}, Tuple{T}} where T","page":"PartiallySeparable.jl Documentation","title":"PartiallySeparableStructure.compiled_grad_of_elmt_fun","text":"compiled_grad_of_elmt_fun(elmt_fun)\n\nReturn  the GradientTape compiled to speed up the ReverseDiff computation of the elmt_fun gradient in the future\n\n\n\n\n\n","category":"method"},{"location":"#PartiallySeparableStructure.construct_Sparse_Hessian-Union{Tuple{Y}, Tuple{T}, Tuple{PartiallySeparableStructure.SPS{T},PartiallySeparableStructure.Hess_matrix{Y}}} where Y<:Number where T","page":"PartiallySeparable.jl Documentation","title":"PartiallySeparableStructure.construct_Sparse_Hessian","text":"constructSparseHessian(sps, B) Build from the Partially separable Structure sps and the Hessian approximation B a SpaseArray which represent B in other form.\n\n\n\n\n\n","category":"method"},{"location":"#PartiallySeparableStructure.element_gradient!-Union{Tuple{T}, Tuple{Y}, Tuple{ReverseDiff.CompiledTape,AbstractArray{T,1},PartiallySeparableStructure.element_gradient{T}}} where T<:Number where Y","page":"PartiallySeparable.jl Documentation","title":"PartiallySeparableStructure.element_gradient!","text":"elementgradient!(compiltape, x, g) Compute the element grandient from the compil_tape compiled before according to the vector x, and store the result in the vector g Use of ReverseDiff\n\n\n\n\n\n","category":"method"},{"location":"#PartiallySeparableStructure.element_gradient2!-Union{Tuple{T}, Tuple{Y}, Tuple{Y,AbstractArray{T,1},PartiallySeparableStructure.element_gradient{T}}} where T<:Number where Y","page":"PartiallySeparable.jl Documentation","title":"PartiallySeparableStructure.element_gradient2!","text":"element_gradient2!(expr_tree, x, g)\n\nCompute the element grandient of the function represents by expr_tree according to the vector x, and store the result in the vector g. This was the previous version using ForwardDiff. The actual version using ReverseDiff is more efficient.\n\n\n\n\n\n","category":"method"},{"location":"#PartiallySeparableStructure.evaluate_SPS-Union{Tuple{T}, Tuple{Y}, Tuple{PartiallySeparableStructure.SPS{T},AbstractArray{Y,1}}} where T where Y<:Number","page":"PartiallySeparable.jl Documentation","title":"PartiallySeparableStructure.evaluate_SPS","text":"evaluate_SPS(sps,x)\n\nevalutate the partially separable function f = ∑fᵢ, stored in the sps structure at the point x. f(x) = ∑fᵢ(xᵢ), so we compute independently each fᵢ(xᵢ) and we return the sum.\n\n\n\n\n\n","category":"method"},{"location":"#PartiallySeparableStructure.evaluate_SPS_gradient!-Union{Tuple{T}, Tuple{Y}, Tuple{PartiallySeparableStructure.SPS{T},AbstractArray{Y,1},PartiallySeparableStructure.grad_vector{Y}}} where T where Y<:Number","page":"PartiallySeparable.jl Documentation","title":"PartiallySeparableStructure.evaluate_SPS_gradient!","text":"evaluate_SPS_gradient!(sps,x,g)\n\nCompute the gradient of the partially separable structure sps, and store the result in the gradvector structure g. Using ReversDiff package. Not obvious good behaviour with Threads.@threads, sometime yes sometime no. Noted that we use the previously compiled GradientTape in elementgradient! that use ReverseDiff.\n\n\n\n\n\n","category":"method"},{"location":"#PartiallySeparableStructure.evaluate_SPS_gradient2!-Union{Tuple{T}, Tuple{Y}, Tuple{PartiallySeparableStructure.SPS{T},AbstractArray{Y,1},PartiallySeparableStructure.grad_vector{Y}}} where T where Y<:Number","page":"PartiallySeparable.jl Documentation","title":"PartiallySeparableStructure.evaluate_SPS_gradient2!","text":"evaluate_SPS_gradient2!(sps,x,g)\n\nCompute the gradient of the partially separable structure sps, and store the result in the grad_vector structure g. Using ForwardDiff package. Bad behaviour with Threads.@threads. This was the previous version using ForwardDiff. The actual version using ReverseDiff is more efficient.\n\n\n\n\n\n","category":"method"},{"location":"#PartiallySeparableStructure.evaluate_element_hessian-Union{Tuple{T}, Tuple{Y}, Tuple{PartiallySeparableStructure.element_function{T},AbstractArray{Y,1}}} where T where Y<:Number","page":"PartiallySeparable.jl Documentation","title":"PartiallySeparableStructure.evaluate_element_hessian","text":"evaluate_element_hessian(fᵢ,xᵢ)\n\nCompute the Hessian of the elemental function fᵢ : Gᵢ a n × n matrix. So xᵢ a vector of size nᵢ. The result of the function is the triplet of the sparse matrix Gᵢ.\n\n\n\n\n\n","category":"method"},{"location":"#PartiallySeparableStructure.evaluate_gradient-Union{Tuple{T}, Tuple{Y}, Tuple{PartiallySeparableStructure.SPS{T},Array{Y,1}}} where T where Y<:Number","page":"PartiallySeparable.jl Documentation","title":"PartiallySeparableStructure.evaluate_gradient","text":"evaluate_gradient(sps,x)\n\nevalutate the gradient of the partially separable function f = ∑ fι, stored in the sps structure at the point x, return a vector of size n (the number of variable) which is the gradient. Première version de la fonction inutile car inefficace.\n\n\n\n\n\n","category":"method"},{"location":"#PartiallySeparableStructure.evaluate_hessian-Union{Tuple{T}, Tuple{Y}, Tuple{PartiallySeparableStructure.SPS{T},AbstractArray{Y,1}}} where T where Y<:Number","page":"PartiallySeparable.jl Documentation","title":"PartiallySeparableStructure.evaluate_hessian","text":"evaluate_hessian(sps,x)\n\nevalutate the hessian of the partially separable function f = ∑ fᵢ, stored in the sps structure at the point x. Return the sparse matrix of the hessian of size n × n.\n\n\n\n\n\n","category":"method"},{"location":"#PartiallySeparableStructure.id_hessian!-Union{Tuple{Y}, Tuple{T}, Tuple{PartiallySeparableStructure.SPS{T},PartiallySeparableStructure.Hess_matrix{Y}}} where Y<:Number where T","page":"PartiallySeparable.jl Documentation","title":"PartiallySeparableStructure.id_hessian!","text":"id_hessian!(sps, B)\n\nConstruct a kinf of Id Hessian, it will initialize each element Hessian Bᵢ with an Id matrix, B =  ∑ᵢᵐ Uᵢᵀ Bᵢ Uᵢ\n\n\n\n\n\n","category":"method"},{"location":"#PartiallySeparableStructure.minus_grad_vec!-Union{Tuple{T}, Tuple{PartiallySeparableStructure.grad_vector{T},PartiallySeparableStructure.grad_vector{T},PartiallySeparableStructure.grad_vector{T}}} where T<:Number","page":"PartiallySeparable.jl Documentation","title":"PartiallySeparableStructure.minus_grad_vec!","text":"minus_grad_vec!(g1,g2,res)\n\nStore in res: g1 minus g2, but g1 and g2 have a particular structure which is grad_vector{T}. We need this operation to have the difference for each element gradient for TR method. g1 = gₖ and g2 = gₖ₋₁.\n\n\n\n\n\n","category":"method"},{"location":"#PartiallySeparableStructure.product_matrix_sps!-Union{Tuple{T}, Tuple{Y}, Tuple{PartiallySeparableStructure.SPS{T},PartiallySeparableStructure.Hess_matrix{Y},AbstractArray{Y,1},AbstractArray{Y,1}}} where T where Y<:Number","page":"PartiallySeparable.jl Documentation","title":"PartiallySeparableStructure.product_matrix_sps!","text":"product_matrix_sps!(sps,B,x,Bx)\n\nThis function make the product of the structure B which represents a symetric matrix and the vector x, the result is stored in Bx. We need the structure sps for the variable used in each B[i], to replace B[i]*x[i] in the result vector by using f_inter!.\n\n\n\n\n\n","category":"method"},{"location":"#PartiallySeparableStructure.product_matrix_sps-Union{Tuple{T}, Tuple{Y}, Tuple{PartiallySeparableStructure.SPS{T},PartiallySeparableStructure.Hess_matrix{Y},Array{Y,1}}} where T where Y<:Number","page":"PartiallySeparable.jl Documentation","title":"PartiallySeparableStructure.product_matrix_sps","text":"product_matrix_sps(sps,B,x)\n\nThis function make the product of the structure B which represents a symetric matrix and the vector x. We need the structure sps for the variable used in each B[i], to replace B[i]*x[i] in the result vector.\n\n\n\n\n\n","category":"method"},{"location":"#PartiallySeparableStructure.product_vector_sps-Union{Tuple{T}, Tuple{Y}, Tuple{Z}, Tuple{PartiallySeparableStructure.SPS{T},PartiallySeparableStructure.grad_vector{Y},Array{Z,1}}} where T where Y<:Number where Z<:Number","page":"PartiallySeparable.jl Documentation","title":"PartiallySeparableStructure.product_vector_sps","text":"product_vector_sps(sps, g, x)\n\ncompute the product g⊤ x = ∑ Uᵢ⊤ gᵢ⊤ xᵢ. So we need the sps structure to get the Uᵢ. On ne s'en sert pas en pratique mais peut-être pratique pour faire des vérifications\n\n\n\n\n\n","category":"method"},{"location":"#PartiallySeparableStructure.struct_hessian!-Union{Tuple{Y}, Tuple{T}, Tuple{PartiallySeparableStructure.SPS{T},AbstractArray{Y,1},PartiallySeparableStructure.Hess_matrix{Y}}} where Y<:Number where T","page":"PartiallySeparable.jl Documentation","title":"PartiallySeparableStructure.struct_hessian!","text":"struct_hessian!(sps,x,H)\n\nEvalutate the hessian of the partially separable function, stored in the sps structure at the point x. Store the Hessian in a particular structure H :: Hess_matrix.\n\n\n\n\n\n","category":"method"},{"location":"#PartiallySeparableStructure.struct_hessian-Union{Tuple{T}, Tuple{Y}, Tuple{PartiallySeparableStructure.SPS{T},AbstractArray{Y,1}}} where T where Y<:Number","page":"PartiallySeparable.jl Documentation","title":"PartiallySeparableStructure.struct_hessian","text":"struct_hessian(sps,x)\n\nevalutate the hessian of the partially separable function, stored in the sps structure at the point x. Return the Hessian in a particular structure : Hess_matrix.\n\n\n\n\n\n","category":"method"},{"location":"#PartiallySeparableStructure.update_SPS_BFGS!-Union{Tuple{T}, Tuple{Y}, Tuple{PartiallySeparableStructure.SPS{T},PartiallySeparableStructure.Hess_matrix{Y},PartiallySeparableStructure.Hess_matrix{Y},PartiallySeparableStructure.grad_vector{Y},AbstractArray{Y,1}}} where T where Y<:Number","page":"PartiallySeparable.jl Documentation","title":"PartiallySeparableStructure.update_SPS_BFGS!","text":"update_SPS_BFGS(sps, Bₖ, Bₖ₊₁, yₖ, sₖ)\n\nupdate the Hessian approximation Bₖ using the SR1 method, according to the sps partially separable structre. To make the update, we need the gradvector y and the vector s. B, B1 and y use structure linked with the partially separable structure stored in sps.\n\n\n\n\n\n","category":"method"},{"location":"#PartiallySeparableStructure.update_SPS_SR1!-Union{Tuple{T}, Tuple{Y}, Tuple{PartiallySeparableStructure.SPS{T},PartiallySeparableStructure.Hess_matrix{Y},PartiallySeparableStructure.Hess_matrix{Y},Array{Y,1},Array{Y,1}}} where T where Y<:Number","page":"PartiallySeparable.jl Documentation","title":"PartiallySeparableStructure.update_SPS_SR1!","text":"update_SPS_SR1(sps, Bₖ, Bₖ₊₁, yₖ, sₖ)\n\nupdate the Hessian approximation Bₖ using the SR1 method, according to the sps partially separable structre. To make the update, we need the vector y and s.\n\n\n\n\n\n","category":"method"},{"location":"#PartiallySeparableStructure.update_SPS_SR1!-Union{Tuple{T}, Tuple{Y}, Tuple{PartiallySeparableStructure.SPS{T},PartiallySeparableStructure.Hess_matrix{Y},PartiallySeparableStructure.Hess_matrix{Y},PartiallySeparableStructure.grad_vector{Y},AbstractArray{Y,1}}} where T where Y<:Number","page":"PartiallySeparable.jl Documentation","title":"PartiallySeparableStructure.update_SPS_SR1!","text":"update_SPS_SR1(sps, Bₖ, Bₖ₊₁, yₖ, sₖ)\n\nupdate the Hessian approximation Bₖ using the SR1 method, according to the sps partially separable structre. To make the update, we need the gradvector y and the vector s. B, B1 and y use structure linked with the partially separable structure stored in sps.\n\n\n\n\n\n","category":"method"}]
}
